(in-package :forward)

(defun mkstr (&rest args)
  (with-output-to-string (s)
    (dolist (a args) (princ a s))))
(defun symb (&rest args)
  (values (intern (apply #'mkstr args))))
(defun clean-name (symbol)
  (case symbol
    (|:| 'colon)
    (|;| 'semi-col)
    (otherwise symbol)))
(defun extract-rank (list)
  "Gives the rank of the array, if the array contains other arrays
gives the length of the first array. Array cannot be nil."
  (cond ((and (consp list)
              (remove-if #'null (mapcar #'consp list)))
         (length list))
        ((consp list) 1)
        (t 0)))
(defun same-length-p (lists)
  (let (res)
    (when (> (length lists) 0)
      (dolist (l (mapcar #'length lists))
        (setf res (= l (length (car lists))))))
    res))
